<?php

namespace Mchekin\RpgRuleset\Tests\Unit;


use DomainException;
use Mchekin\RpgRuleset\AttributeBuilder;
use Mchekin\RpgRuleset\CharacterBuilder;
use Mchekin\RpgRuleset\Dice\Dice;
use Mockery;
use PHPUnit\Framework\TestCase;

class AttributeBuilderTest extends TestCase
{
    /**
     * @var Mockery\MockInterface|Dice
     */
    private $dice;

    /**
     * @var AttributeBuilder
     */
    private $attributeBuilder;

    public function setUp()
    {
        parent::setUp();

        $this->dice = Mockery::mock(Dice::class);

        $this->attributeBuilder = new AttributeBuilder($this->dice);
    }

    public function tearDown()
    {
        Mockery::close();

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @dataProvider rollsProvider
     *
     * @test
     *
     * @param int $firstDiceRoll
     * @param int $secondDiceRoll
     * @param int $thirdDiceRoll
     * @param string $attributeType
     */
    public function generatesAttributes(
        int $firstDiceRoll,
        int $secondDiceRoll,
        int $thirdDiceRoll,
        string $attributeType
    )
    {
        // Arrange
        $diceRollsSum = $firstDiceRoll + $secondDiceRoll + $thirdDiceRoll;
        $this->dice->shouldReceive('roll')->once()->andReturn($firstDiceRoll);
        $this->dice->shouldReceive('roll')->once()->andReturn($secondDiceRoll);
        $this->dice->shouldReceive('roll')->once()->andReturn($thirdDiceRoll);

        // Act
        $attributes = $this->attributeBuilder->build(compact('attributeType'));

        // Assert
        $this->assertEquals($diceRollsSum, $attributes->getValue($attributeType));
    }

    /**
     * @return array
     */
    public function rollsProvider()
    {
        return [
            [1, 1, 1, CharacterBuilder::ATTRIBUTE_STRENGTH],
            [6, 6, 6, CharacterBuilder::ATTRIBUTE_AGILITY],
            [3, 4, 5, CharacterBuilder::ATTRIBUTE_CONSTITUTION],
        ];
    }
}