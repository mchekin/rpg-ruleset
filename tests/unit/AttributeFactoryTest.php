<?php

namespace Mchekin\RpgRuleset\Tests\Unit;


use DomainException;
use Mchekin\RpgRuleset\AttributeBuilder;
use Mchekin\RpgRuleset\Dice\Dice;
use Mockery;
use PHPUnit\Framework\TestCase;

class AttributeFactoryTest extends TestCase
{
    /**
     * @var Mockery\MockInterface|Dice
     */
    private $dice;

    /**
     * @var AttributeBuilder
     */
    private $attributeBuilder;

    public function setUp()
    {
        parent::setUp();

        $this->dice = Mockery::mock(Dice::class);

        $this->attributeBuilder = new AttributeBuilder($this->dice);
    }

    public function tearDown()
    {
        Mockery::close();

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * @dataProvider rollsProvider
     * @test
     * @param int $firstDiceRoll
     * @param int $secondDiceRoll
     * @param int $thirdDiceRoll
     * @param string $attributeType
     */
    public function generatesAttribute(
        int $firstDiceRoll,
        int $secondDiceRoll,
        int $thirdDiceRoll,
        string $attributeType
    )
    {
        // Arrange
        $diceRollsSum = $firstDiceRoll + $secondDiceRoll + $thirdDiceRoll;
        $this->dice->shouldReceive('roll')->once()->andReturn($firstDiceRoll);
        $this->dice->shouldReceive('roll')->once()->andReturn($secondDiceRoll);
        $this->dice->shouldReceive('roll')->once()->andReturn($thirdDiceRoll);

        // Act
        $attribute = $this->attributeBuilder->build($attributeType);

        // Assert
        $this->assertEquals($diceRollsSum, $attribute->getValue());
        $this->assertEquals($attributeType, $attribute->getAttributeType());
    }

    /**
     * @return array
     */
    public function rollsProvider()
    {
        return [
            [1, 1, 1, 'Strength'],
            [6, 6, 6, 'Agility'],
            [3, 4, 5, 'Constitution'],
        ];
    }

    /**
     * @test
     * @expectedException DomainException
     * @expectedExceptionMessage Unsupported attribute Unsupported.
     */
    public function throwsExceptionOnUnsupportedAttributeType()
    {

        // Arrange
        $attributeType = 'Unsupported';

        // Act
        $this->attributeBuilder->build($attributeType);

        // Assert
    }
}